<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright Red Hat, Inc., and individual contributors

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.jboss.aerogear</groupId>
        <artifactId>aerogear-parent</artifactId>
        <!-- NOTE: if updated for version of UPS dependencies, please update the 'aerogear.bom.version' as well -->
        <version>0.2.16</version>
    </parent>

    <groupId>org.jboss.aerogear.unifiedpush</groupId>
    <artifactId>unifiedpush-parent</artifactId>
    <version>1.1.0.Final</version>
    <packaging>pom</packaging>

    <name>AeroGear UnifiedPush Server</name>
    <url>http://aerogear.org/push</url>

    <scm>
        <connection>scm:git:git://github.com/aerogear/aerogear-unifiedpush-server.git</connection>
        <developerConnection>scm:git:git@github.com:aerogear/aerogear-unifiedpush-server.git</developerConnection>
        <url>https://github.com/aerogear/aerogear-unifiedpush-server</url>
        <tag>1.1.0.Final</tag>
    </scm>

    <issueManagement>
        <system>jira</system>
        <url>https://issues.jboss.org/browse/AGPUSH</url>
    </issueManagement>

    <ciManagement>
        <system>travis-ci</system>
        <url>https://travis-ci.org/aerogear/aerogear-unifiedpush-server</url>
    </ciManagement>

    <modules>
        <module>model</module>
        <module>migrator</module>
        <module>push</module>
        <module>service</module>
        <module>jaxrs</module>
        <module>admin-ui</module>
        <module>dependencies</module>
        <module>servers</module>
    </modules>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>org.jboss.aerogear</groupId>
                <artifactId>aerogear-crypto</artifactId>
                <version>${aerogear.crypto.version}</version>
            </dependency>

            <!-- We need to redefine few testing dependencies until JDF updates -with-tools BOM -->
            <!-- https://issues.jboss.org/browse/JDF-417 -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill of Materials (BOM). A BOM specifies the versions
                of a "stack" (or a collection) of artifacts. We use this here so that we always get the correct versions of artifacts.
                Here we use
                the jboss-javaee-6.0 stack (you can read this as the JBoss stack of the Java EE 6 APIs) -->
            <dependency>
                <groupId>org.jboss.bom</groupId>
                <artifactId>jboss-javaee-6.0-with-hibernate</artifactId>
                <version>${jboss-javaee-6.0.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-core</artifactId>
                <version>4.2.15.Final</version>
            </dependency>

            <!-- AeroGear Dependencies BOM Imports -->
            <dependency>
                <groupId>org.jboss.aerogear</groupId>
                <artifactId>aerogear-bom</artifactId>
                <version>${aerogear.bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- using latest of OpenEJB -->
            <dependency>
                <groupId>org.apache.openejb</groupId>
                <artifactId>openejb-core-hibernate</artifactId>
                <version>4.7.0</version>
                <type>pom</type>
            </dependency>

            <!-- AeroGear Android Dependencies BOM Imports -->
            <dependency>
                <groupId>org.jboss.aerogear</groupId>
                <artifactId>aerogear-android-bom</artifactId>
                <version>${aerogear.bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!-- we really do not need javadocs for the server, there are no Java APIs exposed -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jboss.as.plugins</groupId>
                <artifactId>jboss-as-maven-plugin</artifactId>
                <version>${jboss-as-maven-plugin.version}</version>
                <configuration>
                    <skip>false</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${wildfly-maven-plugin.version}</version>
                <configuration>
                    <skip>false</skip>
                </configuration>
            </plugin>


        </plugins>
    </build>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Define the version of JBoss' Java EE 6 APIs we want to import. Any dependencies from org.jboss.spec will have their
            version defined by this BOM -->
        <jboss-javaee-6.0.version>1.0.7.Final</jboss-javaee-6.0.version>

        <!--
            Options to override the compiler arguments directly on the compiler arument line to separate between what
            the IDE understands as the source level and what the Maven compiler actually use.
        -->
        <maven.compiler.argument.target>1.7</maven.compiler.argument.target>
        <maven.compiler.argument.source>1.7</maven.compiler.argument.source>

        <jboss-as-maven-plugin.version>7.5.Final</jboss-as-maven-plugin.version>
        <wildfly-maven-plugin.version>1.0.2.Final</wildfly-maven-plugin.version>

        <aerogear.bom.version>0.2.16</aerogear.bom.version>

        <!-- Override versions of AeroGear BOMs-->
        <junit.version>4.11</junit.version>

        <!-- Code coverage -->
        <org.jacoco.ant.version>0.6.3.201306030806</org.jacoco.ant.version>
        <org.jacoco.agent.version>0.6.3.201306030806</org.jacoco.agent.version>
        <org.jacoco.jacoco-maven-plugin.version>0.6.3.201306030806</org.jacoco.jacoco-maven-plugin.version>
        <ant.contrib.version>20020829</ant.contrib.version>
        <aerogear.crypto.version>0.1.5</aerogear.crypto.version>
    </properties>

    <profiles>
        <profile>
            <id>test</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

            <dependencyManagement>
                <dependencies>
                    <!-- AeroGear Test Dependencies BOM Imports -->
                    <dependency>
                        <groupId>org.jboss.aerogear</groupId>
                        <artifactId>aerogear-test-bom</artifactId>
                        <version>${aerogear.bom.version}</version>
                        <type>pom</type>
                        <scope>import</scope>
                    </dependency>
                </dependencies>
            </dependencyManagement>
        </profile>
        <profile>
            <!-- Make sure that you also activate 'test' profile if you activate this one explicitly -->
	        <id>openshift</id>
	        <build>
	            <plugins>
	                <plugin>
	                    <groupId>org.apache.maven.plugins</groupId>
	                    <artifactId>maven-war-plugin</artifactId>
	                    <configuration>
	                        <webXml>src/main/resources/openshift/web.xml</webXml>
	                    </configuration>
	                </plugin>
	            </plugins>
	        </build>
		</profile>

        <!--
            Builds the distribution.

            Usage:
                - mvn clean install -Pdist,test

            Preparing/Performing release, include as well:
                - mvn release:GOAL -Pdist,test
        -->
        <profile>
            <id>dist</id>
            <modules>
                <module>dist</module>
            </modules>
        </profile>

        <!--
            Profile for JAX-RS doclet generation. This is only working on JDK7, due to the usage of outdated tools

            Usage:
               - mvn clean install -Pjaxrs-doclet,test
        -->
        <profile>
            <id>jaxrs-doclet</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>enforce-tools</id>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <requireJavaVersion>
                                            <!-- Enforce java 1.7 for compiling -->
                                            <!-- This is needed because jax-doclet is broken on jdk8 -->
                                            <version>(,1.8)</version>
                                        </requireJavaVersion>
                                    </rules>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
	            </plugins>
	        </build>
		</profile>

        <profile>
            <id>code-coverage</id>
            <properties>
                <unifiedpush-parent.build>${user.dir}/target</unifiedpush-parent.build>
                <jacoco.prep>${unifiedpush-parent.build}/jacoco/prep</jacoco.prep>
                <jacoco.prep.classes>${jacoco.prep}/classes</jacoco.prep.classes>
                <jacoco.prep.sources>${jacoco.prep}/sources</jacoco.prep.sources>
                <jacoco.report.file>${jacoco.prep}/jacoco.exec</jacoco.report.file>
                <jacoco.report.output>${unifiedpush-parent.build}/jacoco/report</jacoco.report.output>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${org.jacoco.jacoco-maven-plugin.version}</version>
                        <configuration>
                            <destFile>${jacoco.report.file}</destFile>
                            <append>true</append>
                        </configuration>
                        <executions>
                            <execution>
                                <id>default-prepare-agent</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.7</version>
                        <dependencies>
                            <dependency>
                                <groupId>org.jacoco</groupId>
                                <artifactId>org.jacoco.ant</artifactId>
                                <version>${org.jacoco.ant.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>ant-contrib</groupId>
                                <artifactId>ant-contrib</artifactId>
                                <version>${ant.contrib.version}</version>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>jacoco-report</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <taskdef name="jacoco-report" classname="org.jacoco.ant.ReportTask" classpathref="maven.plugin.classpath" />
                                        <taskdef classpathref="maven.runtime.classpath" resource="net/sf/antcontrib/antcontrib.properties" />
                                        <available file="${project.build.sourceDirectory}" type="dir" property="source.dir.exists" />
                                        <available file="${jacoco.report.file}" property="exec.file.exists" />
                                        <if>
                                            <equals arg1="${source.dir.exists}" arg2="true" />
                                            <then>
                                                <copy todir="${jacoco.prep.sources}">
                                                    <fileset dir="${project.build.sourceDirectory}" />
                                                </copy>
                                                <copy todir="${jacoco.prep.classes}">
                                                    <fileset dir="${project.build.directory}/classes" />
                                                </copy>
                                                <if>
                                                    <equals arg1="${exec.file.exists}" arg2="true" />
                                                    <then>
                                                        <trycatch reference="report_exception">
                                                            <try>
                                                                <jacoco-report>
                                                                    <executiondata>
                                                                        <file file="${jacoco.report.file}" />
                                                                    </executiondata>
                                                                    <structure name="AeroGear UnifiedPush Server Unit Tests">
                                                                        <classfiles>
                                                                            <fileset dir="${jacoco.prep.classes}" />
                                                                        </classfiles>
                                                                        <sourcefiles encoding="${project.build.sourceEncoding}">
                                                                            <fileset dir="${jacoco.prep.sources}" />
                                                                        </sourcefiles>
                                                                    </structure>
                                                                    <html destdir="${jacoco.report.output}" />
                                                                </jacoco-report>
                                                            </try>
                                                            <catch>
                                                                <property name="exception" refid="report_exception" />
                                                                <property name="message" value="Error while generating jacoco report: ${exception}" />
                                                                <echo message="${message}" />
                                                            </catch>
                                                        </trycatch>
                                                    </then>
                                                    <else>
                                                        <echo message=".exec file is missing! Expected at: ${jacoco.report.file}!" />
                                                    </else>
                                                </if>
                                            </then>
                                            <else>
                                                <echo message="Source directory ${project.build.sourceDirectory} doesn't exist!" />
                                            </else>
                                        </if>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>

        </profile>
    </profiles>

</project>
